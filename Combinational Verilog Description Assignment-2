Explanation of the Code:
motion_detected: Input from the motion sensor. If the sensor detects motion, this signal will be high (1), otherwise low (0).
camera_trigger: This output is used to trigger the camera. It directly mirrors the motion_detected input, acting as a simple pass-through.

module MotionCameraTrigger(
    input wire motion_detected,    // Input from the motion sensor (1 = motion detected, 0 = no motion)
    output wire camera_trigger     // Output to trigger the camera (1 = trigger camera, 0 = no trigger)
);

    // Combinational logic to trigger camera when motion is detected
    assign camera_trigger = motion_detected;

endmodule

-------------------------------------------------------------------------------------------------------------------------------------


Explanation of the Code
debounce Module: The debounce logic stabilizes the input signal from the motion sensor by requiring it to stay high for a set number of clock cycles before recognizing it as a valid motion detection. This is achieved through the debounce module, which weâ€™ll define below.
timer_counter: Counts down to control how long the camera_trigger signal stays high after motion is detected.
timer_active: Keeps track of whether the timer is active, ensuring that each motion detection event triggers the timer only once.


module MotionCameraSystem(
    input wire clk,                 // System clock
    input wire reset,               // System reset
    input wire motion_sensor_in,    // Raw input from motion sensor (1 = motion detected, 0 = no motion)
    output reg camera_trigger       // Output to trigger the camera (1 = trigger camera, 0 = no trigger)
);

    // Parameters for timer delay
    parameter DELAY_CYCLES = 5000000;  // Number of clock cycles to keep the camera triggered (adjust as needed)

    // Debounced motion signal
    wire motion_detected;
    debounce #(.DEBOUNCE_CYCLES(100000)) debounce_inst(
        .clk(clk),
        .reset(reset),
        .in(motion_sensor_in),
        .out(motion_detected)
    );

    // Timer variables
    reg [31:0] timer_counter;
    reg timer_active;

    // Main control logic
    always @(posedge clk or posedge reset) begin                                                            
        if (reset) begin
            camera_trigger <= 0;
            timer_counter <= 0;
            timer_active <= 0;
        end else if (motion_detected && !timer_active) begin
            // Start the timer when motion is detected
            camera_trigger <= 1;
            timer_active <= 1;
            timer_counter <= DELAY_CYCLES;
        end else if (timer_active) begin
            // Continue the timer
            if (timer_counter > 0) begin
                timer_counter <= timer_counter - 1;
            end else begin
                // Timer expired, stop triggering the camera
                camera_trigger <= 0;
                timer_active <= 0;
            end
        end
    end

endmodule


----------------------------------------------------------------------------------------------------------------------------------
Explanation of the Debounce Module
Counter: Keeps track of consecutive cycles where the input is stable. Only when the input remains high for DEBOUNCE_CYCLES does the output change, effectively removing any brief fluctuations or noise.


module debounce #(
    parameter DEBOUNCE_CYCLES = 100000  // Adjust based on the clock frequency and sensor noise characteristics
)(
    input wire clk,             // System clock
    input wire reset,           // System reset
    input wire in,              // Raw input signal
    output reg out              // Debounced output signal
);

    reg [31:0] counter;         // Counter to track stable cycles
    reg stable_signal;          // Signal to track stable input

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            counter <= 0;
            stable_signal <= 0;
            out <= 0;
        end else if (in == stable_signal) begin
            // If input matches stable signal, reset counter
            counter <= 0;
        end else begin
            // Increment counter if input is not stable
            counter <= counter + 1;
            if (counter >= DEBOUNCE_CYCLES) begin
                // If counter exceeds threshold, update stable signal
                stable_signal <= in;
                out <= in;
                counter <= 0;
            end
        end
    end

endmodule
------------------------------------------------------------------------------------------------------------------------------------------
How It All Works Together
Motion Detected: When the debounced motion signal (motion_detected) goes high, it activates the timer.
Trigger Camera: The camera_trigger output goes high and remains high for the duration of DELAY_CYCLES.
Timer Countdown: After the specified delay, the camera trigger output is reset to low.
